#!/system/bin/sh
export PATH=/system/bin:/sbin:$PATH
SRC=/system/bootmenu/
BB=/system/xbin/busybox
AWK="$BB awk"

$BB mount -o remount,rw rootfs /

# copy busybox
$BB cp $BB /sbin
# minimal symlinks
$BB ln -s $BB /sbin/cp
$BB ln -s $BB /sbin/[

# touch stamp to prevent loop execution
$BB touch /.bootstamp

#
# check mode
#

key=
if $BB [ -e /system/bootmenu/getkey ]; then
  key=$(/system/bootmenu/getkey)
fi

#
# volume up - original firmware mode
#
if $BB [ ! -z "$key" ] && $BB [ "$key" = 115 ]; then
  exit 0
fi

TYPE=normal
if $BB [ -f /cache/.recovery_mode ] || $BB [ "$key" = 114 ]; then
  TYPE=recovery
fi

if $BB [ "$TYPE" = "normal" ]; then
    exit 0
fi

# remove symbolic links
$BB rm sdcard

#
# remove lg crap
#
$BB rm /*.rc
$BB rm /*.sh

#
# volume down - recovery mode
#
if $BB [ "$TYPE" = "recovery" ]; then
  # unlink /etc
  $BB rm /etc
  $BB mkdir /etc

  $BB cp -fr /system/bootmenu/recovery.tar /
  $BB tar xf /recovery.tar

  if [ ! -z "$restart_adb" ]; then
    $BB killall adbd
  fi
  $BB killall ueventd
  
  $BB mkdir /tmp
  $BB mkdir /sdcard
  $BB chmod 666 /dev/graphics/fb*

  $BB mount -o remount,rw /system /system

  # remove /cache/.recovery_mode
  $BB rm /cache/.recovery_mode
#
# normal mode
#
else
  $BB cp -fr /system/bootmenu/boot.tar /
  $BB tar xf /boot.tar

  $BB killall ueventd
fi

# unmount stuff
$BB umount /dev/cpuctl
$BB umount /dev/pts
$BB umount /data
$BB umount /dvp
$BB umount /persist
$BB umount /sys/kernel/debug
$BB umount /system/app
$BB umount /mpt

# set our init only to the first core << check this
/system/bootmenu/taskset -p -c 0 1
/system/bootmenu/taskset -c 0 /system/bootmenu/2nd-init
#/system/bootmenu/2nd-init

exit 0
